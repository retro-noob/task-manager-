{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LENOVO\\\\diary\\\\src\\\\context\\\\notes\\\\NoteState.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useState } from \"react\";\nimport NoteContext from \"./noteContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NoteState = props => {\n  _s();\n  const host = \"http://localhost:8080\";\n  const notesInitial = [];\n  const [notes, setNotes] = useState(notesInitial);\n\n  // GET  ALL NOTE :FUNCTION\n\n  const getNotes = async () => {\n    // API call (TODO)\n    const response = await fetch(`${host}/api/notes/fetchallnotes}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        \"authtoken\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjNhY2M2OTM4YjNmMTgwNmQ0MDgyOTM0In0sImlhdCI6MTY3MjI2NzQ4OX0.gALxC33RlHGOws8qTCpQVOTPAHBd-AM2qP6cNKxOIsw\"\n      }\n    });\n    const json = await response.json();\n    console.log(json);\n    setNotes(json);\n  };\n\n  // ADD  A NOTE :FUNCTION\n\n  const addNote = async (title, decription, tag) => {\n    // IMPORTANT user auth token k throufh baad m lena h \n\n    // API call (TODO)\n    const response = await fetch(`${host}/api/notes/addnote}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        \"authtoken\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjNhY2M2OTM4YjNmMTgwNmQ0MDgyOTM0In0sImlhdCI6MTY3MjI2NzQ4OX0.gALxC33RlHGOws8qTCpQVOTPAHBd-AM2qP6cNKxOIsw\"\n      },\n      body: JSON.stringify({\n        title,\n        decription,\n        tag\n      }) // body data type must match \"Content-Type\" header\n    });\n\n    console.log(\"Adding a new note\");\n    const note = {\n      \"_id\": \"63b32d857f8c419f87c59e5a\",\n      \"user\": \"63b32cff7f8c419f87c59e55\",\n      \"title\": title,\n      \"description\": decription,\n      \"tag\": tag,\n      \"date\": \"2023-01-02T19:16:21.815Z\",\n      \"__v\": 0\n    };\n    setNotes(notes.concat(note)); // notes array m push kra note ko uske baad notestate ko update concat returns a array push update an array\n  };\n\n  // DELETE  A NOTE :FUNCTION\n  const deleteNote = id => {\n    console.log(\"deleting a note of id\" + id);\n    const newNotes = notes.filter(note => {\n      return note._id !== id;\n    });\n    setNotes(newNotes);\n  };\n\n  // EDIT  A NOTE :FUNCTION\n  const editNote = async (id, title, description, tag) => {\n    //API calls\n\n    const response = await fetch(`${host}/api/notes/updatenote/${id}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        \"authtoken\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjNhY2M2OTM4YjNmMTgwNmQ0MDgyOTM0In0sImlhdCI6MTY3MjI2NzQ4OX0.gALxC33RlHGOws8qTCpQVOTPAHBd-AM2qP6cNKxOIsw\"\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      }) // body data type must match \"Content-Type\" header\n    });\n\n    const json = response.json();\n\n    //Logic for EDIT in client\n    for (let index = 0; index < notes.length; index++) {\n      const element = notes[index];\n      if (element._id === id) {\n        element.title = title;\n        element.description = description;\n        element.tag = tag;\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(NoteContext.Provider, {\n    value: {\n      notes,\n      addNote,\n      deleteNote,\n      editNote,\n      getNotes\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n};\n_s(NoteState, \"kcLCFxdGUyyZC425it31q7Gz3x8=\");\n_c = NoteState;\nexport default NoteState;\nvar _c;\n$RefreshReg$(_c, \"NoteState\");","map":{"version":3,"names":["React","useState","NoteContext","NoteState","props","host","notesInitial","notes","setNotes","getNotes","response","fetch","method","headers","json","console","log","addNote","title","decription","tag","body","JSON","stringify","note","concat","deleteNote","id","newNotes","filter","_id","editNote","description","index","length","element","children"],"sources":["C:/Users/LENOVO/diary/src/context/notes/NoteState.js"],"sourcesContent":["import React from \"react\";\r\nimport { useState } from \"react\";  \r\nimport NoteContext from \"./noteContext\";\r\n\r\nconst NoteState=(props)=>{\r\n const host =\"http://localhost:8080\"\r\n    const notesInitial=[]\r\n const [notes ,setNotes ] = useState(notesInitial);\r\n\r\n// GET  ALL NOTE :FUNCTION\r\n\r\nconst getNotes=async()=>{       \r\n \r\n  // API call (TODO)\r\nconst response = await fetch(`${host}/api/notes/fetchallnotes}`, {\r\n  method: 'GET', \r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n    \"authtoken\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjNhY2M2OTM4YjNmMTgwNmQ0MDgyOTM0In0sImlhdCI6MTY3MjI2NzQ4OX0.gALxC33RlHGOws8qTCpQVOTPAHBd-AM2qP6cNKxOIsw\"\r\n   \r\n  }\r\n \r\n  \r\n});\r\nconst json = await response.json()\r\nconsole.log(json)\r\nsetNotes(json)\r\n\r\n\r\n }\r\n\r\n  \r\n// ADD  A NOTE :FUNCTION\r\n\r\n const addNote=async(title,decription,tag)=>{      // IMPORTANT user auth token k throufh baad m lena h \r\n \r\n  // API call (TODO)\r\nconst response = await fetch(`${host}/api/notes/addnote}`, {\r\n  method: 'POST', \r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n    \"authtoken\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjNhY2M2OTM4YjNmMTgwNmQ0MDgyOTM0In0sImlhdCI6MTY3MjI2NzQ4OX0.gALxC33RlHGOws8qTCpQVOTPAHBd-AM2qP6cNKxOIsw\"\r\n   \r\n  },\r\n \r\n  body: JSON.stringify({title,decription,tag}) // body data type must match \"Content-Type\" header\r\n});\r\n\r\n\r\n  console.log(\"Adding a new note\")\r\n \r\n\r\n   const note=   {\r\n  \"_id\": \"63b32d857f8c419f87c59e5a\",\r\n  \"user\": \"63b32cff7f8c419f87c59e55\",\r\n  \"title\": title,\r\n  \"description\": decription,\r\n  \"tag\": tag,\r\n  \"date\": \"2023-01-02T19:16:21.815Z\",\r\n  \"__v\": 0\r\n};\r\nsetNotes(notes.concat(note)) // notes array m push kra note ko uske baad notestate ko update concat returns a array push update an array\r\n\r\n }\r\n\r\n\r\n\r\n\r\n// DELETE  A NOTE :FUNCTION\r\nconst deleteNote=(id)=>{\r\n  console.log(\"deleting a note of id\"+id)\r\n const newNotes=notes.filter((note)=>{return note._id!==id})\r\n  setNotes(newNotes)\r\n}\r\n\r\n// EDIT  A NOTE :FUNCTION\r\nconst editNote=async (id,title,description,tag)=>{\r\n//API calls\r\n\r\nconst response = await fetch(`${host}/api/notes/updatenote/${id}`, {\r\n  method: 'POST', \r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n    \"authtoken\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjNhY2M2OTM4YjNmMTgwNmQ0MDgyOTM0In0sImlhdCI6MTY3MjI2NzQ4OX0.gALxC33RlHGOws8qTCpQVOTPAHBd-AM2qP6cNKxOIsw\"\r\n   \r\n  },\r\n \r\n  body: JSON.stringify({title,description,tag}) // body data type must match \"Content-Type\" header\r\n});\r\nconst json =response.json();\r\n\r\n\r\n  //Logic for EDIT in client\r\n  for (let index = 0; index < notes.length; index++) {\r\n    const element = notes[index];\r\n    if(element._id===id){\r\n      element.title=title;\r\n      element.description=description;\r\n      element.tag=tag;\r\n    }\r\n    \r\n  }\r\n  \r\n}\r\n\r\n\r\nreturn( \r\n    <NoteContext.Provider  value ={{notes,addNote,deleteNote,editNote,getNotes}}>\r\n{props.children}\r\n    </NoteContext.Provider>\r\n)\r\n\r\n}\r\n\r\nexport default NoteState;"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,OAAO;AAChC,OAAOC,WAAW,MAAM,eAAe;AAAC;AAExC,MAAMC,SAAS,GAAEC,KAAK,IAAG;EAAA;EACxB,MAAMC,IAAI,GAAE,uBAAuB;EAChC,MAAMC,YAAY,GAAC,EAAE;EACxB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAE,GAAGP,QAAQ,CAACK,YAAY,CAAC;;EAElD;;EAEA,MAAMG,QAAQ,GAAC,YAAS;IAEtB;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEN,IAAK,2BAA0B,EAAE;MAC/DO,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,WAAW,EAAE;MAEf;IAGF,CAAC,CAAC;IACF,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACI,IAAI,EAAE;IAClCC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;IACjBN,QAAQ,CAACM,IAAI,CAAC;EAGb,CAAC;;EAGF;;EAEC,MAAMG,OAAO,GAAC,OAAMC,KAAK,EAACC,UAAU,EAACC,GAAG,KAAG;IAAO;;IAEjD;IACF,MAAMV,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEN,IAAK,qBAAoB,EAAE;MACzDO,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,WAAW,EAAE;MAEf,CAAC;MAEDQ,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAACL,KAAK;QAACC,UAAU;QAACC;MAAG,CAAC,CAAC,CAAC;IAC/C,CAAC,CAAC;;IAGAL,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;IAG/B,MAAMQ,IAAI,GAAI;MACf,KAAK,EAAE,0BAA0B;MACjC,MAAM,EAAE,0BAA0B;MAClC,OAAO,EAAEN,KAAK;MACd,aAAa,EAAEC,UAAU;MACzB,KAAK,EAAEC,GAAG;MACV,MAAM,EAAE,0BAA0B;MAClC,KAAK,EAAE;IACT,CAAC;IACDZ,QAAQ,CAACD,KAAK,CAACkB,MAAM,CAACD,IAAI,CAAC,CAAC,EAAC;EAE5B,CAAC;;EAKF;EACA,MAAME,UAAU,GAAEC,EAAE,IAAG;IACrBZ,OAAO,CAACC,GAAG,CAAC,uBAAuB,GAACW,EAAE,CAAC;IACxC,MAAMC,QAAQ,GAACrB,KAAK,CAACsB,MAAM,CAAEL,IAAI,IAAG;MAAC,OAAOA,IAAI,CAACM,GAAG,KAAGH,EAAE;IAAA,CAAC,CAAC;IAC1DnB,QAAQ,CAACoB,QAAQ,CAAC;EACpB,CAAC;;EAED;EACA,MAAMG,QAAQ,GAAC,OAAOJ,EAAE,EAACT,KAAK,EAACc,WAAW,EAACZ,GAAG,KAAG;IACjD;;IAEA,MAAMV,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEN,IAAK,yBAAwBsB,EAAG,EAAC,EAAE;MACjEf,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,WAAW,EAAE;MAEf,CAAC;MAEDQ,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAACL,KAAK;QAACc,WAAW;QAACZ;MAAG,CAAC,CAAC,CAAC;IAChD,CAAC,CAAC;;IACF,MAAMN,IAAI,GAAEJ,QAAQ,CAACI,IAAI,EAAE;;IAGzB;IACA,KAAK,IAAImB,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAG1B,KAAK,CAAC2B,MAAM,EAAED,KAAK,EAAE,EAAE;MACjD,MAAME,OAAO,GAAG5B,KAAK,CAAC0B,KAAK,CAAC;MAC5B,IAAGE,OAAO,CAACL,GAAG,KAAGH,EAAE,EAAC;QAClBQ,OAAO,CAACjB,KAAK,GAACA,KAAK;QACnBiB,OAAO,CAACH,WAAW,GAACA,WAAW;QAC/BG,OAAO,CAACf,GAAG,GAACA,GAAG;MACjB;IAEF;EAEF,CAAC;EAGD,oBACI,QAAC,WAAW,CAAC,QAAQ;IAAE,KAAK,EAAG;MAACb,KAAK;MAACU,OAAO;MAACS,UAAU;MAACK,QAAQ;MAACtB;IAAQ,CAAE;IAAA,UAC/EL,KAAK,CAACgC;EAAQ;IAAA;IAAA;IAAA;EAAA,QACY;AAG3B,CAAC;AAAA,GA5GKjC,SAAS;AAAA,KAATA,SAAS;AA8Gf,eAAeA,SAAS;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}