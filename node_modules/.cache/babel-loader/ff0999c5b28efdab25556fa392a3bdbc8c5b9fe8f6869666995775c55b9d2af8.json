{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LENOVO\\\\diary\\\\src\\\\context\\\\notes\\\\NoteState.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useState } from \"react\";\nimport NoteContext from \"./noteContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NoteState = props => {\n  _s();\n  const host = \"http://localhost:8080\";\n  const notesInitial = [];\n  const [notes, setNotes] = useState(notesInitial);\n\n  // GET  ALL NOTE :FUNCTION\n\n  const getNotes = async () => {\n    // API call (TODO)\n    const response = await fetch(`${host}/api/notes/fetchallnotes`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        \"auth-token\": localStorage.getItem('token')\n      }\n    });\n    const json = await response.json();\n    console.log(json);\n    setNotes(json);\n  };\n\n  // ADD  A NOTE :FUNCTION\n\n  const addNote = async (title, description, tag) => {\n    // IMPORTANT user auth token k throufh baad m lena h \n\n    // API call (TODO)\n    const response = await fetch(`${host}/api/notes/addnote`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        \"auth-token\": localStorage.getItem('token')\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      }) // body data type must match \"Content-Type\" header\n    });\n\n    const note = await response.json();\n    setNotes(notes.concat(note));\n\n    // notes array m push kra note ko uske baad notestate ko update concat returns a array push update an array\n  };\n\n  // DELETE  A NOTE :FUNCTION\n  const deleteNote = async id => {\n    //API CALL \n    const response = await fetch(`${host}/api/notes/deletenote/${id}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n        \"auth-token\": localStorage.getItem('token')\n      }\n    });\n    const json = response.json();\n    console.log(json);\n    console.log(\"Deleting the note with id\" + id);\n    const newNotes = notes.filter(note => {\n      return note._id !== id;\n    });\n    setNotes(newNotes);\n  };\n\n  // EDIT  A NOTE :FUNCTION\n  const editNote = async (id, title, description, tag) => {\n    //API calls\n\n    const response = await fetch(`${host}/api/notes/updatenote/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        \"auth-token\": localStorage.getItem('token')\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      }) // body data type must match \"Content-Type\" header\n    });\n\n    const json = await response.json();\n    console.log(json);\n    let newNotes = JSON.parse(JSON.stringify(notes));\n    //Logic for EDIT in client\n    for (let index = 0; index < newNotes.length; index++) {\n      const element = newNotes[index];\n      if (element._id === id) {\n        newNotes[index].title = title;\n        newNotes[index].description = description;\n        newNotes[index].tag = tag;\n        break;\n      }\n    }\n    setNotes(newNotes);\n  };\n\n  // ShareNote\n  const initial = [];\n  const [key, setKey] = useState(initial);\n  const shareNote = note => {\n    console.log(note._id);\n    setKey(note._id);\n  };\n  const feedNote = async key => {\n    try {\n      const response = await fetch(`${host}/api/notes/fetchnote/${key}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'auth-token': localStorage.getItem('token')\n        }\n      });\n      const note = await response.json();\n      console.log(note);\n      // Handle the retrieved note as desired\n    } catch (error) {\n      console.error('Error fetching note:', error);\n    }\n  };\n\n  // function findNoteById(notes, id) {\n\n  // }\n\n  return (\n    /*#__PURE__*/\n    //NoteContext provider contains all the children components \n    _jsxDEV(NoteContext.Provider, {\n      value: {\n        notes,\n        addNote,\n        deleteNote,\n        editNote,\n        getNotes,\n        shareNote,\n        key,\n        feedNote\n      },\n      children: props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 5\n    }, this)\n  );\n};\n_s(NoteState, \"HO8Uc41Kv+0IgbJmzGIhtrbJrJk=\");\n_c = NoteState;\nexport default NoteState;\nvar _c;\n$RefreshReg$(_c, \"NoteState\");","map":{"version":3,"names":["React","useState","NoteContext","NoteState","props","host","notesInitial","notes","setNotes","getNotes","response","fetch","method","headers","localStorage","getItem","json","console","log","addNote","title","description","tag","body","JSON","stringify","note","concat","deleteNote","id","newNotes","filter","_id","editNote","parse","index","length","element","initial","key","setKey","shareNote","feedNote","error","children"],"sources":["C:/Users/LENOVO/diary/src/context/notes/NoteState.js"],"sourcesContent":["import React from \"react\";\r\nimport { useState } from \"react\";  \r\nimport NoteContext from \"./noteContext\";\r\n\r\nconst NoteState=(props)=>{\r\n const host =\"http://localhost:8080\"\r\n const notesInitial=[]\r\n const [notes ,setNotes ] = useState(notesInitial);\r\n\r\n// GET  ALL NOTE :FUNCTION\r\n\r\nconst getNotes=async()=>{       \r\n \r\n  // API call (TODO)\r\nconst response = await fetch(`${host}/api/notes/fetchallnotes`, {\r\n  method: 'GET', \r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n    \r\n      \"auth-token\":localStorage.getItem('token')\r\n    \r\n}\r\n \r\n  \r\n});\r\nconst json = await response.json()\r\nconsole.log(json) \r\nsetNotes(json)\r\n\r\n\r\n }\r\n\r\n  \r\n// ADD  A NOTE :FUNCTION\r\n\r\n const addNote = async(title,description,tag)=>{      // IMPORTANT user auth token k throufh baad m lena h \r\n \r\n  // API call (TODO)\r\nconst response = await fetch(`${host}/api/notes/addnote`, {\r\n  method: 'POST', \r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n     \"auth-token\": localStorage.getItem('token')\r\n    \r\n   \r\n  },\r\n \r\n  body: JSON.stringify({title,description,tag}) // body data type must match \"Content-Type\" header\r\n});\r\n\r\nconst note =await response.json();\r\nsetNotes(notes.concat(note))\r\n\r\n // notes array m push kra note ko uske baad notestate ko update concat returns a array push update an array\r\n\r\n }\r\n\r\n\r\n\r\n\r\n// DELETE  A NOTE :FUNCTION\r\nconst deleteNote= async (id)=>{\r\n\r\n//API CALL \r\nconst response = await fetch(`${host}/api/notes/deletenote/${id}`, {\r\n  method: 'DELETE', \r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n    \"auth-token\": localStorage.getItem('token')\r\n   \r\n  }\r\n});\r\nconst json =response.json();\r\nconsole.log(json)\r\n\r\n\r\nconsole.log(\"Deleting the note with id\" + id);\r\nconst newNotes = notes.filter((note) => { return note._id !== id })\r\nsetNotes(newNotes)\r\n}\r\n\r\n\r\n\r\n// EDIT  A NOTE :FUNCTION\r\nconst editNote=async (id,title,description,tag)=>{\r\n//API calls\r\n\r\nconst response = await fetch(`${host}/api/notes/updatenote/${id}`, {\r\n  method: 'PUT', \r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n     \"auth-token\": localStorage.getItem('token')\r\n    \r\n   \r\n  },\r\n \r\n  body: JSON.stringify({title,description,tag}) // body data type must match \"Content-Type\" header\r\n});\r\nconst json = await response.json();\r\nconsole.log(json)\r\n\r\nlet newNotes=JSON.parse(JSON.stringify(notes))\r\n  //Logic for EDIT in client\r\n  for (let index = 0; index < newNotes.length; index++) {\r\n    const element = newNotes[index];\r\n    if(element._id===id){\r\n      newNotes[index].title=title;\r\n      newNotes[index].description=description;\r\n      newNotes[index].tag=tag;\r\n      break;\r\n    }    \r\n  }\r\n  setNotes(newNotes);\r\n}\r\n\r\n\r\n// ShareNote\r\nconst initial=[]\r\nconst [key,setKey]=useState(initial)\r\n\r\n   \r\nconst shareNote=(note)=>{\r\n console.log(note._id)\r\n setKey(note._id);\r\n  \r\n} \r\n\r\nconst feedNote = async (key) => {\r\n  try {\r\n    const response = await fetch(`${host}/api/notes/fetchnote/${key}`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'auth-token': localStorage.getItem('token'),\r\n      },\r\n    });\r\n    const note = await response.json();\r\n    console.log(note);\r\n    // Handle the retrieved note as desired\r\n  } catch (error) {\r\n    console.error('Error fetching note:', error);\r\n  }\r\n};\r\n\r\n// function findNoteById(notes, id) {\r\n  \r\n// }\r\n\r\n\r\n\r\nreturn(\r\n  //NoteContext provider contains all the children components \r\n    <NoteContext.Provider  value ={{notes,addNote,deleteNote,editNote,getNotes,shareNote,key,feedNote}}>\r\n{props.children}\r\n    </NoteContext.Provider>\r\n)\r\n\r\n}\r\n\r\nexport default NoteState;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}